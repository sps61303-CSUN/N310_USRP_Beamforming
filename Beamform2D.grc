options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: '""'
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: Beamform2D
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Beamform2D
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 12.0]
    rotation: 0
    state: enabled

blocks:
- name: ARV_file
  id: variable
  parameters:
    comment: ''
    value: '''/home/sawdust/Desktop/USRPdata/2Dsim/RectangularHalfLambda.cf64'''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [672, 12.0]
    rotation: 0
    state: true
- name: bandwidth
  id: variable
  parameters:
    comment: ''
    value: samp_rate/2
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [368, 12.0]
    rotation: 0
    state: enabled
- name: beamforming_rate
  id: variable
  parameters:
    comment: ''
    value: '30'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [536, 12.0]
    rotation: 0
    state: true
- name: center_freq
  id: variable
  parameters:
    comment: ''
    value: 2.425e9
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [272, 12.0]
    rotation: 0
    state: enabled
- name: gain
  id: variable
  parameters:
    comment: ''
    value: '75'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [464, 12.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 1.25E6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [176, 12.0]
    rotation: 0
    state: enabled
- name: Asynch_Weighting_0
  id: Asynch_Weighting
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    poll_rate: beamforming_rate*4
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1040, 360.0]
    rotation: 0
    state: enabled
- name: Asynch_Weighting_0_0
  id: Asynch_Weighting
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    poll_rate: beamforming_rate*4
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1040, 472.0]
    rotation: 0
    state: enabled
- name: CovarianceMatrix_0
  id: CovarianceMatrix
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decimation: int(samp_rate/beamforming_rate)
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 468.0]
    rotation: 0
    state: true
- name: Drop_Samples_0
  id: Drop_Samples
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    sample_window: '1024'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [80, 996.0]
    rotation: 0
    state: disabled
- name: Video_Display_0
  id: Video_Display
  parameters:
    Display_Height: 256*4
    Display_Width: 256*4
    Input_Height: '256'
    Input_Width: '256'
    affinity: ''
    alias: ''
    comment: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [624, 340.0]
    rotation: 180
    state: true
- name: blocks_complex_to_real_0_0
  id: blocks_complex_to_real
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [904, 1028.0]
    rotation: 180
    state: disabled
- name: blocks_file_source_0_0
  id: blocks_file_source
  parameters:
    affinity: ''
    alias: ''
    begin_tag: pmt.PMT_NIL
    comment: ''
    file: /home/sawdust/Desktop/USRPdata/2Dsim/MovingRectangleSim.cf64
    length: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    repeat: 'True'
    type: complex
    vlen: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [216, 108.0]
    rotation: 0
    state: enabled
- name: blocks_message_debug_0
  id: blocks_message_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    en_uvec: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [392, 872.0]
    rotation: 0
    state: disabled
- name: blocks_probe_rate_0
  id: blocks_probe_rate
  parameters:
    affinity: ''
    alias: ''
    alpha: '0.15'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    mintime: '1000.0'
    type: complex
    vlen: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [104, 852.0]
    rotation: 0
    state: disabled
- name: blocks_streams_to_vector_0
  id: blocks_streams_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_streams: '4'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [256, 264.0]
    rotation: 0
    state: disabled
- name: blocks_throttle_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: complex
    vlen: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [440, 140.0]
    rotation: 0
    state: enabled
- name: blocks_vector_to_streams_0_0
  id: blocks_vector_to_streams
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_streams: '4'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [904, 1080.0]
    rotation: 0
    state: disabled
- name: epy_block_0
  id: epy_block
  parameters:
    ARV_file: ARV_file
    Color_Map: '''plasma'''
    _source_code: "import numpy as np\nfrom gnuradio import gr\nfrom numpy import\
      \ linalg as LA\nimport matplotlib.pyplot as plt\n#from scipy.signal import find_peaks\n\
      \n\nclass blk(gr.sync_block):\n\n  def __init__(self,ARV_file=\"/media/sf_ShareFolder/2Dsim/RectangularHalfLambda.cf64\"\
      ,Color_Map=\"plasma\"):  # only default arguments here\n    \"\"\"arguments\
      \ to this function show up as parameters in GRC\"\"\"\n    gr.sync_block.__init__(\n\
      \      self,\n      name='Beam Pattern',   # will show up in GRC\n      in_sig=[(np.complex64,4)],\n\
      \      out_sig=[(np.int16,256*256*3)],\n    )\n    \n    #Assemble the ARV from\
      \ the vector input (4 by ARV_Length)\n    self.ARV = np.fromfile(ARV_file,dtype=np.complex64).reshape(-1,4).T\n\
      \    self.ARV_Length = len(self.ARV[1,:])\n    \n    #Set the color map for\
      \ the video display\n    self.cmap = plt.get_cmap(Color_Map)\n\n  def work(self,\
      \ input_items, output_items):\n    for sampleIndex in range(len(input_items[0])):\n\
      \      \n      #Input the Weights\n      Weights = input_items[0][sampleIndex]\n\
      \      \n      #Apply Weights to Arrival Matrix\n      BeamPattern = np.abs(Weights.T\
      \ @ self.ARV)\n      \n      #===========================Create Video Display===========================\n\
      \      \n      #Normalize BeamPattern from 0 to 1\n      BeamPattern = BeamPattern/np.max(BeamPattern)\n\
      \      \n      #Apply color map and display the MUSIC Psuedospectrum\n     \
      \ RGB = self.cmap(BeamPattern)[:,:3] * 255\n      \n      #Convert from RGB\
      \ to YUV\n      Ychannel = (0.299 * RGB[:, 0] + 0.587 * RGB[:, 1] + 0.114 *\
      \ RGB[:, 2]).astype(np.int16)\n      Uchannel = (-0.147 * RGB[:, 0] - 0.289\
      \ * RGB[:, 1] + 0.436 * RGB[:, 2] + 128).astype(np.int16)\n      Vchannel =\
      \ (0.615 * RGB[:, 0] - 0.515 * RGB[:, 1] - 0.100 * RGB[:, 2] + 128).astype(np.int16)\n\
      \      \n      #Interleave Each Channel and write to output\n      output_items[0][sampleIndex]\
      \ = np.column_stack((Ychannel,Uchannel,Vchannel)).ravel()\n      \n    return\
      \ len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Beam Pattern', 'blk', [('ARV_file', "'/media/sf_ShareFolder/2Dsim/RectangularHalfLambda.cf64'"),
      ('Color_Map', "'plasma'")], [('0', 'complex', 4)], [('0', 'short', 196608)],
      'arguments to this function show up as parameters in GRC', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [392, 980.0]
    rotation: 0
    state: disabled
- name: epy_block_0_0
  id: epy_block
  parameters:
    ARV_file: ARV_file
    Color_Map: '''plasma'''
    N_signals: '2'
    _source_code: "import numpy as np\nfrom gnuradio import gr\nfrom numpy import\
      \ linalg as LA\nimport matplotlib.pyplot as plt\n#import time\n\nclass blk(gr.sync_block):\n\
      \n  def __init__(self,ARV_file=\"/home/sawdust/Desktop/USRPdata/2Dsim/RectangularHalfLambda.cf64\"\
      ,N_signals=2,Color_Map=\"plasma\"):\n  \n    #Assemble the ARV from the vector\
      \ input (4 by ARV_Length)\n    self.ARV = np.fromfile(ARV_file,dtype=np.complex64).reshape(-1,4).T\n\
      \    self.ARV_Length = len(self.ARV[1,:])\n    \n    gr.sync_block.__init__(\n\
      \      self,\n      name='MUSIC AOA and MVDR Weights',   # will show up in GRC\n\
      \      in_sig=[(np.complex64,10)],\n      out_sig=[(np.int16,self.ARV_Length*3),(np.complex64,4),(np.complex64,4)],\n\
      \    )     \n    \n    #Determine the number of rows and columns of the square\
      \ ARV\n    self.Columns = int(np.sqrt(self.ARV_Length))\n    self.Rows = int(self.ARV_Length/self.Columns)\n\
      \    \n    #Initialize the position of the two targets\n    self.TargetCoords1\
      \ = np.array([0,0])\n    self.TargetCoords2 = np.array([self.Rows,self.Columns])\n\
      \    \n    #Create the two sub-ARVs\n    self.ARV1 = np.diag(np.array([1,1,0,0]))\
      \ @ self.ARV\n    self.ARV2 = np.diag(np.array([0,0,1,1])) @ self.ARV\n    \n\
      \    #Define the number of signals being searched for\n    self.Signals = N_signals\n\
      \    \n    #Create the Circle that blocks out the first peak\n    x,y = np.meshgrid(np.arange(-10,11),\
      \ np.arange(-10,11))\n    R = np.sqrt(np.square(x)+np.square(y)).flatten()\n\
      \    self.Block = (x.flatten()+y.flatten()*self.Columns)[np.where(R<=10)]\n\
      \    \n    #Set the color map for the video display\n    cmap = plt.get_cmap(Color_Map)\n\
      \    \n    #Convert the color map from RGB to YUV\n    RGB = cmap(np.linspace(0,1,256))[:,:3]*255\n\
      \    self.YUV = np.zeros((256,3),np.int16)\n    self.YUV[:,0] = (0.299 * RGB[:,\
      \ 0] + 0.587 * RGB[:, 1] + 0.114 * RGB[:, 2]).astype(np.int16)\n    self.YUV[:,1]\
      \ = (-0.147 * RGB[:, 0] - 0.289 * RGB[:, 1] + 0.436 * RGB[:, 2] + 128).astype(np.int16)\n\
      \    self.YUV[:,2] = (0.615 * RGB[:, 0] - 0.515 * RGB[:, 1] - 0.100 * RGB[:,\
      \ 2] + 128).astype(np.int16)\n    \n  def work(self, input_items, output_items):\n\
      \     \n    for sampleIndex in range(len(input_items[0])):\n    \n      #t0\
      \ = time.time()\n      #=========================Receive Data============================\n\
      \      \n      #Assemble Upper Triangular Cross Correlation Matrix (4 by 4)\n\
      \      Rxx = np.zeros((4,4), dtype=np.complex64)\n      Rxx[np.triu_indices(4)]\
      \ = input_items[0][sampleIndex]\n      \n      #Compute Eigendecomposition\n\
      \      Eigvals, U = LA.eigh(Rxx,\"U\")\n      U = U[:,np.argsort(Eigvals)]\n\
      \      Eigvals = np.sort(Eigvals)\n      \n      #Compute Noise Subspace\n \
      \     U_n = U[:,:(4-self.Signals)]\n      P_n = U_n @ np.conj(U_n.T)\n     \
      \ \n      #Compute Signal Subspace\n      U_s = U[:,(4-self.Signals):4]\n  \
      \    \n      #=======================Phase Correction==========================\n\
      \      \n      #Compute the Collinearity in pieces\n      BaseCollinearity =\
      \ np.sum(np.conj(self.ARV) * (P_n @ self.ARV), axis=0)\n      ErrorComponent\
      \ = 2*np.sum(np.conj(self.ARV2) * (P_n @ self.ARV1), axis=0)\n      \n     \
      \ #Assume the ErrorComponent always has the ideal phase to compute BestCaseCollinearity\n\
      \      CleanComponent = BaseCollinearity - np.real(ErrorComponent)\n      BestCaseCollinearity\
      \ = np.abs(CleanComponent - np.abs(ErrorComponent))\n      \n      #Compute\
      \ Phase Error using signal peak\n      PhaseError = np.angle(-1*ErrorComponent[np.argmin(BestCaseCollinearity)])\n\
      \      \n      #Compute the complex number needed to offset the phase error\n\
      \      Shift = np.exp(1j*PhaseError)\n      \n      #==========================MUSIC\
      \ AOA==============================\n      \n      #Compute the True Collinearity\
      \ by shifting the error component\n      TrueCollinearity = np.abs(CleanComponent\
      \ + np.real(ErrorComponent*np.conj(Shift)))\n       \n      #Compute the MUSIC\
      \ Psuedospectrum using the True Collinearity\n      PMUSIC = np.where(TrueCollinearity\
      \ == 0, 100, np.log10(1 / TrueCollinearity))\n      \n      #Find the first\
      \ AOA\n      PeakIndex1 = np.argmin(TrueCollinearity)\n      \n      #Block\
      \ out the area around the first peak and find the next highest point\n     \
      \ Block = self.Block+PeakIndex1\n      Block_bounded = Block[Block<self.ARV_Length]\n\
      \      TrueCollinearity[Block_bounded] = 1\n      PeakIndex2 = np.argmin(TrueCollinearity)\
      \ \n      \n      #======================Maintain Target Lock=======================\n\
      \      \n      #Convert indices into 2d coordinates\n      PeakCoords1 = np.array(np.unravel_index(PeakIndex1,(self.Rows,self.Columns)))\n\
      \      PeakCoords2 = np.array(np.unravel_index(PeakIndex2,(self.Rows,self.Columns)))\n\
      \      \n      #Compare the square of the distances between each pairs of points\n\
      \      Error1 = np.sum(np.square(PeakCoords1-self.TargetCoords1)+np.square(PeakCoords2-self.TargetCoords2))\n\
      \      Error2 = np.sum(np.square(PeakCoords1-self.TargetCoords2)+np.square(PeakCoords2-self.TargetCoords1))\n\
      \      \n      #Update the target coordinates with the closest new coordinates\n\
      \      if Error1<=Error2:\n        self.TargetCoords1 = PeakCoords1\n      \
      \  self.TargetCoords2 = PeakCoords2\n      else:\n        self.TargetCoords1\
      \ = PeakCoords2\n        self.TargetCoords2 = PeakCoords1\n        #Swap the\
      \ two indices\n        PeakIndex1,PeakIndex2 = PeakIndex2,PeakIndex1\n     \
      \        \n      #=======================MVDR Beamforming==========================\n\
      \      \n      #Create the signal subspace projection and phase correction matrix\n\
      \      CorrectionMatrix = U_s @ np.conj(U_s.T) @ np.diag(np.array([1,1,Shift,Shift]))\n\
      \      \n      #Phase correct the arrival vector associated with each peak and\
      \ project it onto the signal subspace\n      a1 = CorrectionMatrix @ self.ARV[:,PeakIndex1]\n\
      \      a2 = CorrectionMatrix @ self.ARV[:,PeakIndex2]\n      \n      #Compute\
      \ the inverse of the eigenvalues\n      EigvalsInv = np.where(Eigvals == 0,\
      \ 1e30, 1/Eigvals)\n          \n      #Compute the inverse of the cross correlation\
      \ matrix\n      InvRxx = U @ np.diag(EigvalsInv) @ np.conj(U.T)\n      \n  \
      \    #Create MVDR Weights using the projected arrival vectors\n      output_items[1][sampleIndex]\
      \ = np.conj(InvRxx @ a1[:,None]).flatten() #/ (np.conj(a1[:,None].T) @ InvRxx\
      \ @ a1[:,None])\n      output_items[2][sampleIndex] = np.conj(InvRxx @ a2[:,None]).flatten()\
      \ #/ (np.conj(a2[:,None].T) @ InvRxx @ a2[:,None])\n      \n      #======================Create\
      \ Video Display=======================\n      \n      #Normalize MUSIC spectrum\
      \ from 0 to 255\n      AOAplot = (255*PMUSIC/np.max(PMUSIC)).astype(np.int16)\n\
      \      #AOAplot[np.ravel_multi_index(self.TargetCoords1,(self.Rows,self.Columns))]\
      \ = 0\n      #AOAplot[np.ravel_multi_index(self.TargetCoords2,(self.Rows,self.Columns))]\
      \ = 0\n      #AOAplot[Block_bounded] = 0\n      \n      #Apply color map and\
      \ write to the video output\n      output_items[0][sampleIndex] = self.YUV[AOAplot,:].flatten()\n\
      \      #print(time.time()-t0)\n      \n    return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('MUSIC AOA and MVDR Weights', 'blk', [('ARV_file', "'/home/sawdust/Desktop/USRPdata/2Dsim/RectangularHalfLambda.cf64'"),
      ('N_signals', '2'), ('Color_Map', "'plasma'")], [('0', 'complex', 10)], [('0',
      'short', 196608), ('1', 'complex', 4), ('2', 'complex', 4)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [560, 440.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'True'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: magenta
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'True'
    gui_hint: ''
    label1: RF0
    label10: Signal 10
    label2: RF1
    label3: RF2
    label4: RF3
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"In-Phase Time Plot"'
    nconnections: '4'
    size: '512'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_NORM
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: 1/24
    width1: '2'
    width10: '1'
    width2: '2'
    width3: '2'
    width4: '2'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Volts
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1088, 1080.0]
    rotation: 0
    state: disabled
- name: qtgui_time_sink_x_0_1
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: magenta
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'True'
    gui_hint: ''
    label1: I
    label10: Signal 10
    label2: Q
    label3: RF2
    label4: RF3
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"MVDR Output 2"'
    nconnections: '1'
    size: '128'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0'
    tr_mode: qtgui.TRIG_MODE_NORM
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: 1/4
    width1: '2'
    width10: '1'
    width2: '2'
    width3: '2'
    width4: '2'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Volts
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1248, 348.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0_1_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: magenta
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'True'
    gui_hint: ''
    label1: I
    label10: Signal 10
    label2: Q
    label3: RF2
    label4: RF3
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"MVDR Output 1"'
    nconnections: '1'
    size: '512'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0'
    tr_mode: qtgui.TRIG_MODE_AUTO
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '"snr"'
    type: complex
    update_time: 1/20
    width1: '2'
    width10: '1'
    width2: '2'
    width3: '2'
    width4: '2'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Volts
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1248, 460.0]
    rotation: 0
    state: enabled
- name: uhd_usrp_source_0
  id: uhd_usrp_source
  parameters:
    affinity: ''
    alias: ''
    ant0: RX2
    ant1: RX2
    ant10: RX2
    ant11: RX2
    ant12: RX2
    ant13: RX2
    ant14: RX2
    ant15: RX2
    ant16: RX2
    ant17: RX2
    ant18: RX2
    ant19: RX2
    ant2: RX2
    ant20: RX2
    ant21: RX2
    ant22: RX2
    ant23: RX2
    ant24: RX2
    ant25: RX2
    ant26: RX2
    ant27: RX2
    ant28: RX2
    ant29: RX2
    ant3: RX2
    ant30: RX2
    ant31: RX2
    ant4: RX2
    ant5: RX2
    ant6: RX2
    ant7: RX2
    ant8: RX2
    ant9: RX2
    bw0: bandwidth
    bw1: bandwidth
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: bandwidth
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: bandwidth
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: center_freq
    center_freq1: center_freq
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: center_freq
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: center_freq
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: internal
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dc_offs0: 0+0j
    dc_offs1: 0+0j
    dc_offs10: 0+0j
    dc_offs11: 0+0j
    dc_offs12: 0+0j
    dc_offs13: 0+0j
    dc_offs14: 0+0j
    dc_offs15: 0+0j
    dc_offs16: 0+0j
    dc_offs17: 0+0j
    dc_offs18: 0+0j
    dc_offs19: 0+0j
    dc_offs2: 0+0j
    dc_offs20: 0+0j
    dc_offs21: 0+0j
    dc_offs22: 0+0j
    dc_offs23: 0+0j
    dc_offs24: 0+0j
    dc_offs25: 0+0j
    dc_offs26: 0+0j
    dc_offs27: 0+0j
    dc_offs28: 0+0j
    dc_offs29: 0+0j
    dc_offs3: 0+0j
    dc_offs30: 0+0j
    dc_offs31: 0+0j
    dc_offs4: 0+0j
    dc_offs5: 0+0j
    dc_offs6: 0+0j
    dc_offs7: 0+0j
    dc_offs8: 0+0j
    dc_offs9: 0+0j
    dc_offs_enb0: default
    dc_offs_enb1: default
    dc_offs_enb10: default
    dc_offs_enb11: default
    dc_offs_enb12: default
    dc_offs_enb13: default
    dc_offs_enb14: default
    dc_offs_enb15: default
    dc_offs_enb16: default
    dc_offs_enb17: default
    dc_offs_enb18: default
    dc_offs_enb19: default
    dc_offs_enb2: default
    dc_offs_enb20: default
    dc_offs_enb21: default
    dc_offs_enb22: default
    dc_offs_enb23: default
    dc_offs_enb24: default
    dc_offs_enb25: default
    dc_offs_enb26: default
    dc_offs_enb27: default
    dc_offs_enb28: default
    dc_offs_enb29: default
    dc_offs_enb3: default
    dc_offs_enb30: default
    dc_offs_enb31: default
    dc_offs_enb4: default
    dc_offs_enb5: default
    dc_offs_enb6: default
    dc_offs_enb7: default
    dc_offs_enb8: default
    dc_offs_enb9: default
    dev_addr: addr=192.168.10.2
    dev_args: rx_lo_source=internal,init_cals=BASIC|TX_ATTENUATION_DELAY|RX_GAIN_DELAY|PATH_DELAY|TX_LO_LEAKAGE_INTERNAL|LOOPBACK_RX_LO_DELAY
    gain0: gain
    gain1: gain
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: gain
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: gain
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    gain_type0: default
    gain_type1: default
    gain_type10: default
    gain_type11: default
    gain_type12: default
    gain_type13: default
    gain_type14: default
    gain_type15: default
    gain_type16: default
    gain_type17: default
    gain_type18: default
    gain_type19: default
    gain_type2: default
    gain_type20: default
    gain_type21: default
    gain_type22: default
    gain_type23: default
    gain_type24: default
    gain_type25: default
    gain_type26: default
    gain_type27: default
    gain_type28: default
    gain_type29: default
    gain_type3: default
    gain_type30: default
    gain_type31: default
    gain_type4: default
    gain_type5: default
    gain_type6: default
    gain_type7: default
    gain_type8: default
    gain_type9: default
    iq_imbal0: 0+0j
    iq_imbal1: 0+0j
    iq_imbal10: 0+0j
    iq_imbal11: 0+0j
    iq_imbal12: 0+0j
    iq_imbal13: 0+0j
    iq_imbal14: 0+0j
    iq_imbal15: 0+0j
    iq_imbal16: 0+0j
    iq_imbal17: 0+0j
    iq_imbal18: 0+0j
    iq_imbal19: 0+0j
    iq_imbal2: 0+0j
    iq_imbal20: 0+0j
    iq_imbal21: 0+0j
    iq_imbal22: 0+0j
    iq_imbal23: 0+0j
    iq_imbal24: 0+0j
    iq_imbal25: 0+0j
    iq_imbal26: 0+0j
    iq_imbal27: 0+0j
    iq_imbal28: 0+0j
    iq_imbal29: 0+0j
    iq_imbal3: 0+0j
    iq_imbal30: 0+0j
    iq_imbal31: 0+0j
    iq_imbal4: 0+0j
    iq_imbal5: 0+0j
    iq_imbal6: 0+0j
    iq_imbal7: 0+0j
    iq_imbal8: 0+0j
    iq_imbal9: 0+0j
    iq_imbal_enb0: default
    iq_imbal_enb1: default
    iq_imbal_enb10: default
    iq_imbal_enb11: default
    iq_imbal_enb12: default
    iq_imbal_enb13: default
    iq_imbal_enb14: default
    iq_imbal_enb15: default
    iq_imbal_enb16: default
    iq_imbal_enb17: default
    iq_imbal_enb18: default
    iq_imbal_enb19: default
    iq_imbal_enb2: default
    iq_imbal_enb20: default
    iq_imbal_enb21: default
    iq_imbal_enb22: default
    iq_imbal_enb23: default
    iq_imbal_enb24: default
    iq_imbal_enb25: default
    iq_imbal_enb26: default
    iq_imbal_enb27: default
    iq_imbal_enb28: default
    iq_imbal_enb29: default
    iq_imbal_enb3: default
    iq_imbal_enb30: default
    iq_imbal_enb31: default
    iq_imbal_enb4: default
    iq_imbal_enb5: default
    iq_imbal_enb6: default
    iq_imbal_enb7: default
    iq_imbal_enb8: default
    iq_imbal_enb9: default
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '4'
    num_mboards: '1'
    otw: ''
    rx_agc0: Default
    rx_agc1: Default
    rx_agc10: Default
    rx_agc11: Default
    rx_agc12: Default
    rx_agc13: Default
    rx_agc14: Default
    rx_agc15: Default
    rx_agc16: Default
    rx_agc17: Default
    rx_agc18: Default
    rx_agc19: Default
    rx_agc2: Default
    rx_agc20: Default
    rx_agc21: Default
    rx_agc22: Default
    rx_agc23: Default
    rx_agc24: Default
    rx_agc25: Default
    rx_agc26: Default
    rx_agc27: Default
    rx_agc28: Default
    rx_agc29: Default
    rx_agc3: Default
    rx_agc30: Default
    rx_agc31: Default
    rx_agc4: Default
    rx_agc5: Default
    rx_agc6: Default
    rx_agc7: Default
    rx_agc8: Default
    rx_agc9: Default
    samp_rate: samp_rate
    sd_spec0: '"A:0 A:1 B:0 B:1"'
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 108.0]
    rotation: 0
    state: disabled
- name: virtual_sink_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: RF
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [624, 148.0]
    rotation: 0
    state: enabled
- name: virtual_sink_0_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: RF
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [424, 308.0]
    rotation: 0
    state: disabled
- name: virtual_source_0_0_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: RF
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [216, 468.0]
    rotation: 0
    state: enabled
- name: virtual_source_0_0_0_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: RF
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [856, 356.0]
    rotation: 0
    state: enabled
- name: virtual_source_0_0_0_0_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: RF
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [856, 468.0]
    rotation: 0
    state: enabled
- name: virtual_source_0_0_1
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: RF
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [904, 980.0]
    rotation: 0
    state: disabled

connections:
- [Asynch_Weighting_0, '0', qtgui_time_sink_x_0_1, '0']
- [Asynch_Weighting_0_0, '0', qtgui_time_sink_x_0_1_0, '0']
- [CovarianceMatrix_0, '0', epy_block_0_0, '0']
- [blocks_complex_to_real_0_0, '0', blocks_vector_to_streams_0_0, '0']
- [blocks_file_source_0_0, '0', blocks_throttle_0, '0']
- [blocks_probe_rate_0, rate, blocks_message_debug_0, print]
- [blocks_streams_to_vector_0, '0', virtual_sink_0_0, '0']
- [blocks_throttle_0, '0', virtual_sink_0, '0']
- [blocks_vector_to_streams_0_0, '0', qtgui_time_sink_x_0_0, '0']
- [blocks_vector_to_streams_0_0, '1', qtgui_time_sink_x_0_0, '1']
- [blocks_vector_to_streams_0_0, '2', qtgui_time_sink_x_0_0, '2']
- [blocks_vector_to_streams_0_0, '3', qtgui_time_sink_x_0_0, '3']
- [epy_block_0_0, '0', Video_Display_0, '0']
- [epy_block_0_0, '1', Asynch_Weighting_0, '1']
- [epy_block_0_0, '2', Asynch_Weighting_0_0, '1']
- [uhd_usrp_source_0, '0', blocks_streams_to_vector_0, '0']
- [uhd_usrp_source_0, '1', blocks_streams_to_vector_0, '1']
- [uhd_usrp_source_0, '2', blocks_streams_to_vector_0, '2']
- [uhd_usrp_source_0, '3', blocks_streams_to_vector_0, '3']
- [virtual_source_0_0_0, '0', CovarianceMatrix_0, '0']
- [virtual_source_0_0_0_0, '0', Asynch_Weighting_0, '0']
- [virtual_source_0_0_0_0_0, '0', Asynch_Weighting_0_0, '0']
- [virtual_source_0_0_1, '0', blocks_complex_to_real_0_0, '0']

metadata:
  file_format: 1
